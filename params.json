{"name":"Jenesis","tagline":"Distributed Unit Testing Foundation","body":"Jenesis\r\n======= \r\n\r\n## Distributed Unit Testing Foundation\r\n\r\n### Introduction\r\n\r\n#### Possible Meanings to You\r\n   - Running multiple unit tests in parallel on multiple hosts / JVMs / OS'\r\n   - Running the same unit test in parallel on multiple hosts / JVMs / OS'\r\n   - Running a multi-node unit test on multiple hosts / JVMs\r\n   - Benchmarking the same unit test in parallel on multiple hosts / JVMs / OS'\r\n\r\n#### Use cases for above Meanings\r\n   - Speed up of huge test suites by parallelizing execution of the tests\r\n   - Stress- and / or Load-testing\r\n   - Testing distributed / scalable applications\r\n   - Testing cluster solutions\r\n\r\n#### Disclaimer\r\nThis project is not sponsored or started by nor affiliated to Hazelcast, Inc in any possible way.\r\nIt is a personal, spare-time project started to prevent people from always reinventing the wheel\r\nas we currently do again at Hazelcast, because there is not yet a solution to be ready-to-use.\r\n\r\n### About this Proposal\r\n\r\n#### Mailing List\r\nPlease find the Google Groups for Jenesis [here](https://groups.google.com/forum/#!forum/jenesis-dev).\r\n\r\n#### Goals\r\nJenesis is meant to be a foundation for application or framework vendors to provide a solution for\r\ndistributed unit tests. It will not be limited to be used with a single framework underneath but\r\nto provide a common API that is extensible to the vendors needs.\r\nIt'll provides a common lifecycle for those tests and an API to hook in your own lifecycle extensions \r\nthat need to take place to set up, execute and tear down tests or tested applications or frameworks.\r\nThis is very much what the Maven plugin concept looks like. A lifecycle is a basic set of phases and\r\nthe vendor can extend phases to add additional functionality like adding special dependencies or\r\nadding virtual machines to be started up before running tests.\r\n\r\nIt will also provide a transparent communication layer where you can integrate special serialization\r\nstrategies and to communicate between the test runner and the remote test agents. This layer is meant\r\nto be immune to network failures and my communicate on a different network to the general tests.\r\n\r\nThe current approach is to integrate it with JUnit but possibly TestNG or other frameworks are added\r\nin the future.\r\n\r\n#### Non Goals\r\nAt the moment the goal is not to build a solution to speed up tests by running standard JUnit tests\r\nin parallel on multiple test slaves. There are interesting / working solutions for that already\r\n(like [Test Load-Balancer TLB](http://test-load-balancer.github.io)) but it might be possible to\r\nimplement those features on top of the goals of this proposal.\r\n\r\n#### Motivation\r\nA lot of middleware / application frameworks provide support for running distributed unit tests\r\nbut there are mostly no frameworks for a general purpose or they seem to have stopped development\r\na long time ago.\r\nTo provide developers and vendors to build reliable but distributed unit tests and applications.\r\n\r\nEven if foundation itself is depending on JUnit and is build on Java there are lots of other JVM\r\nbased languages that can be used to write tests or if you have an external system but a Java client\r\nyou'll be able to build stress tests on top of those solutions.\r\n\r\n#### License\r\nAs the license of the contributed sourcecode the [Apache License 2](http://www.apache.org/licenses/LICENSE-2.0.html)\r\nis chosen. This means that all code base is permitted to be used in closed source applications and \r\ncan be bundled with those, too. In addition to that it also is possible to mix it up with other \r\nlicenses, open and closed source ones.\r\n\r\nFor documentation a suitable license will be chosen from the Creative Commons licenses. A possible\r\ncandidate would be: [CC BY 4.0](http://creativecommons.org/licenses/by/4.0/).\r\nI permits commercial usage and distributing changed documentations but does not prevent relicensing.\r\nThis is pretty much the same terms as AL2 for software but I'm free for suggestions on documentation\r\nlicensing :-)\r\n\r\n#### Project name\r\nJenesis is a pun of the \"Tree of Life\" from the \"Book of Genesis\" and the typical Java J-beginning\r\nproject names. The \"tree of life\" is common a symbol for knowledge but as a tree it also stands for\r\nstableness (stability) and a long life.\r\n\r\nAdditionally if a tree grows more branches will come up and so goes to any application. Those branches\r\nneed to be tested and for a distributed or scalable application it means the bigger it get over time,\r\nby acquiring the more users for example, the more nodes you eventually will have. Even those needs to\r\nbe tested to make sure scaling works for your case and here we are on Jenesis again.\r\n\r\n#### Description\r\nThis is a fast written, mindmap-alike list of thoughts / ideas. At the moment this is not meant to\r\nbe complete or all those things have to be implemented.\r\n   - Support for fork-strategies (local, remote, cloud, custom)\r\n   - Support to shutdown processes gracefully and sigkill them ungracefully\r\n   - Transparent communication between test runner and workers\r\n   - Support for hooking into different phases and extend the base framework\r\n   - Executing remote actions and waiting for events to happen\r\n   - Support for timeouts\r\n   - Support for JVM settings and changing these settings from JVM to JVM\r\n   - Support for repeatable runs of the same test\r\n   - Support for multiple operating systems (for native operations)\r\n   - Automatic building of classpath\r\n   - Support for distributing required files to worker nodes\r\n   - Resolving artifacts from Maven repositories\r\n   - Packaging API to wrap classes / dependencies in custom packages\r\n   - Some kind of remote classloading\r\n   - Piping console / logger output to file / test runner console / null\r\n\r\n#### Status?\r\nI started an implementation a few days ago and all basic ideas seem to work. The \"prototype\" is\r\nan implementation to distribute Hazelcast tests on multiple JVMs but currently only on the local\r\nmachine of the test runner. It forks out JVMs, make them building a cluster and executes cluster\r\noperations on those cluster nodes.\r\n\r\nThe idea was to have a small version of our heartattack solution and to eventually integrate both\r\nbut eventually it will be another highly vendor integrated solution. At Hazelcast we are currently\r\ngoing this way because we need to have those tests now.\r\n\r\nFor a more general purpose I want to start this project to give other the chance to benefit from\r\nthis. That means there is not yet any sourcecode to share on this project since I want to find out\r\nif there is any interest in such a project or not.\r\n\r\n### You want to contribute?\r\nDue to the fact it's not cool to make those kind of projects alone and since there are a lot of\r\ndifferent requirements I'm looking for people that want to help and work on this together.\r\n\r\nTo start you can contribute by adding ideas, requirements, recommendations as a ticket to the Github\r\nissue tracker, you can also contribute by adding code via Pull Requests.\r\nIn addition to that there is a mailing list (Google Group) which can be found \r\n[here](https://groups.google.com/forum/#!forum/jenesis-dev).\r\nEven commit rights to this repository may be granted for highly interested people.\r\n\r\nLet's do this together! If you want to contact me you can do this via Twitter \r\n[@noctarius2k](https://twitter.com/noctarius2k) or using the mail address me[at]noctariusDOTcom.\r\nYou can also either add your name to this [ticket](https://github.com/noctarius/jenesis/issues/1)\r\nor editing the [wiki](https://github.com/noctarius/jenesis/wiki).\r\n\r\n### API ideas\r\nThis API is not meant to be a fully thought-through thing it is more like a basic idea on how such\r\nstuff could look like:\r\n```java\r\n@RemoteAgent(agentClass = LoggingRemoteAgent.class)\r\npublic class DistributedExmapleTestCase {\r\n   \r\n   @Test(timeout = 60000)\r\n   @RemoteTest(initialForks = 5, identification = \"Node-${forkId}\")\r\n   public void testDistributed(RemoteContext remoteContext) {\r\n      // Using defaults from this JVM\r\n      RemoteProcess remoteProcess = remoteContext.forkProcess();\r\n      remoteProcess.waitForStartup(10, TimeUnit.SECONDS);\r\n\r\n      // To all processes\r\n      remoteContext.sendAction(new SomeRemoteAction(), 10);\r\n\r\n      // Kill hard\r\n      remoteProcess.sigkill();\r\n\r\n      // ...\r\n   }\r\n}\r\n\r\npublic class SomeRemoteAction extends SynchronousRemoteAction<Void> {\r\n   \r\n   @Override\r\n   public Void evaluate(CommandContext commandContext) \r\n            throws Exception {\r\n\r\n      Object[] arguments = commandContext.getArguments();\r\n      int seconds = (Integer) arguments[0];\r\n\r\n      System.out.print(\"Waiting \");\r\n      for (int i = 0; i < seconds; i++) {\r\n         System.out.print(\".\");\r\n         TimeUnit.SECONDS.sleep(1);\r\n      }\r\n      System.out.println(\" done.\");\r\n      return null;\r\n   }\r\n}\r\n\r\npublic class LoggingRemoteAgent extends RemoteAgent {\r\n   \r\n   private final Logger logger = LoggerFactory.getLogger(...);\r\n\r\n   @Override\r\n   public void preparationPhase(ExecutionContext executionContext) {\r\n      logger.info(\"Preparation phase started: \"\r\n            + executionContext.getIdentification());\r\n      super.preparationPhase(executionContext);\r\n   }\r\n\r\n   @Override\r\n   public List<Dependency> resolveDependencyPhase(\r\n            ExecutionContext executionContext) {\r\n\r\n      logger.info(\"Resolving dependencies: \" \r\n            + executionContext.getIdentification());\r\n      return super.resolveDependencyPhase(executionContext);\r\n   }\r\n\r\n   // ... further phases\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}